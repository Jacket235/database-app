{"ast":null,"code":"import{createContext,useContext,useState}from\"react\";import userLogIn from\"../functions/userLogIn\";import userLogOut from\"../functions/userLogOut\";import userAutoLogIn from\"../functions/userAutoLogIn\";import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export default function AuthProvider(_ref){let{children}=_ref;const[isLoggedIn,setIsLoggedIn]=useState(false);const[accessToken,setAccessToken]=useState(\"\");const login=async(email,password)=>{const res=await userLogIn(email,password);if(res){setIsLoggedIn(true);setAccessToken(res.accessToken);return res;}else{setIsLoggedIn(false);}};const autoLogin=async token=>{const res=await userAutoLogIn(token);if(res){setIsLoggedIn(true);setAccessToken(res.accessToken);return res;}};const logout=async email=>{const res=await userLogOut(email);if(res){setIsLoggedIn(false);setAccessToken(\"\");return res;}};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{isLoggedIn,login,logout,autoLogin,accessToken},children:children});}export const useAuth=()=>{const context=useContext(AuthContext);if(!context)throw new Error(\"useAuth must be used within an AuthProvider\");return context;};","map":{"version":3,"names":["createContext","useContext","useState","userLogIn","userLogOut","userAutoLogIn","jsx","_jsx","AuthContext","undefined","AuthProvider","_ref","children","isLoggedIn","setIsLoggedIn","accessToken","setAccessToken","login","email","password","res","autoLogin","token","logout","Provider","value","useAuth","context","Error"],"sources":["X:/Other/Coding/React/database-app/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import { createContext, ReactNode, useContext, useState } from \"react\";\r\n\r\nimport userLogIn from \"../functions/userLogIn\";\r\nimport userLogOut from \"../functions/userLogOut\";\r\nimport userAutoLogIn from \"../functions/userAutoLogIn\";\r\n\r\ninterface AuthContextType {\r\n    isLoggedIn: boolean;\r\n    login: (email: string, password: string) => Promise<any>;\r\n    logout: (email: string) => Promise<any>;\r\n    autoLogin: (token: string) => Promise<any>;\r\n    accessToken: string;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport default function AuthProvider({ children }: { children: ReactNode }) {\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    const [accessToken, setAccessToken] = useState<string>(\"\");\r\n\r\n    const login = async (email: string, password: string) => {\r\n        const res = await userLogIn(email, password);\r\n        if (res) {\r\n            setIsLoggedIn(true);\r\n            setAccessToken(res.accessToken);\r\n            return res;\r\n        } else {\r\n            setIsLoggedIn(false);\r\n        }\r\n    }\r\n\r\n    const autoLogin = async (token: string) => {\r\n        const res = await userAutoLogIn(token);\r\n        if (res) {\r\n            setIsLoggedIn(true);\r\n            setAccessToken(res.accessToken)\r\n            return res;\r\n        }\r\n    }\r\n\r\n    const logout = async (email: string) => {\r\n        const res = await userLogOut(email);\r\n        if (res) {\r\n            setIsLoggedIn(false);\r\n            setAccessToken(\"\");\r\n            return res;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ isLoggedIn, login, logout, autoLogin, accessToken }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) throw new Error(\"useAuth must be used within an AuthProvider\");\r\n    return context;\r\n}"],"mappings":"AAAA,OAASA,aAAa,CAAaC,UAAU,CAAEC,QAAQ,KAAQ,OAAO,CAEtE,MAAO,CAAAC,SAAS,KAAM,wBAAwB,CAC9C,MAAO,CAAAC,UAAU,KAAM,yBAAyB,CAChD,MAAO,CAAAC,aAAa,KAAM,4BAA4B,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAUvD,KAAM,CAAAC,WAAW,cAAGR,aAAa,CAA8BS,SAAS,CAAC,CAEzE,cAAe,SAAS,CAAAC,YAAYA,CAAAC,IAAA,CAAwC,IAAvC,CAAEC,QAAkC,CAAC,CAAAD,IAAA,CACtE,KAAM,CAACE,UAAU,CAAEC,aAAa,CAAC,CAAGZ,QAAQ,CAAC,KAAK,CAAC,CACnD,KAAM,CAACa,WAAW,CAAEC,cAAc,CAAC,CAAGd,QAAQ,CAAS,EAAE,CAAC,CAE1D,KAAM,CAAAe,KAAK,CAAG,KAAAA,CAAOC,KAAa,CAAEC,QAAgB,GAAK,CACrD,KAAM,CAAAC,GAAG,CAAG,KAAM,CAAAjB,SAAS,CAACe,KAAK,CAAEC,QAAQ,CAAC,CAC5C,GAAIC,GAAG,CAAE,CACLN,aAAa,CAAC,IAAI,CAAC,CACnBE,cAAc,CAACI,GAAG,CAACL,WAAW,CAAC,CAC/B,MAAO,CAAAK,GAAG,CACd,CAAC,IAAM,CACHN,aAAa,CAAC,KAAK,CAAC,CACxB,CACJ,CAAC,CAED,KAAM,CAAAO,SAAS,CAAG,KAAO,CAAAC,KAAa,EAAK,CACvC,KAAM,CAAAF,GAAG,CAAG,KAAM,CAAAf,aAAa,CAACiB,KAAK,CAAC,CACtC,GAAIF,GAAG,CAAE,CACLN,aAAa,CAAC,IAAI,CAAC,CACnBE,cAAc,CAACI,GAAG,CAACL,WAAW,CAAC,CAC/B,MAAO,CAAAK,GAAG,CACd,CACJ,CAAC,CAED,KAAM,CAAAG,MAAM,CAAG,KAAO,CAAAL,KAAa,EAAK,CACpC,KAAM,CAAAE,GAAG,CAAG,KAAM,CAAAhB,UAAU,CAACc,KAAK,CAAC,CACnC,GAAIE,GAAG,CAAE,CACLN,aAAa,CAAC,KAAK,CAAC,CACpBE,cAAc,CAAC,EAAE,CAAC,CAClB,MAAO,CAAAI,GAAG,CACd,CACJ,CAAC,CAED,mBACIb,IAAA,CAACC,WAAW,CAACgB,QAAQ,EAACC,KAAK,CAAE,CAAEZ,UAAU,CAAEI,KAAK,CAAEM,MAAM,CAAEF,SAAS,CAAEN,WAAY,CAAE,CAAAH,QAAA,CAC9EA,QAAQ,CACS,CAAC,CAE/B,CAEA,MAAO,MAAM,CAAAc,OAAO,CAAGA,CAAA,GAAM,CACzB,KAAM,CAAAC,OAAO,CAAG1B,UAAU,CAACO,WAAW,CAAC,CACvC,GAAI,CAACmB,OAAO,CAAE,KAAM,IAAI,CAAAC,KAAK,CAAC,6CAA6C,CAAC,CAC5E,MAAO,CAAAD,OAAO,CAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}