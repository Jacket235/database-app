{"ast":null,"code":"var _jsxFileName = \"X:\\\\Other\\\\Coding\\\\React\\\\database-app\\\\frontend\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from \"react\";\nimport userLogIn from \"../functions/userLogIn\";\nimport userLogOut from \"../functions/userLogOut\";\nimport userAutoLogIn from \"../functions/userAutoLogIn\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport default function AuthProvider({\n  children\n}) {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [accessToken, setAccessToken] = useState(\"\");\n  const login = async (email, password) => {\n    const res = await userLogIn(email, password);\n    if (res) {\n      setIsLoggedIn(true);\n      setAccessToken(res.accessToken);\n      return res;\n    } else {\n      setIsLoggedIn(false);\n    }\n  };\n  const autoLogin = async token => {\n    const res = await userAutoLogIn(token);\n    if (res) {\n      setIsLoggedIn(true);\n      setAccessToken(res.accessToken);\n      return res;\n    }\n  };\n  const logout = async email => {\n    const res = await userLogOut(email);\n    if (res) {\n      setIsLoggedIn(false);\n      setAccessToken(\"\");\n      return res;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      login,\n      logout,\n      autoLogin,\n      accessToken\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n_s(AuthProvider, \"f3afqasWzCb3+yp0QUODQJ2Kjuk=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) throw new Error(\"useAuth must be used within an AuthProvider\");\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","userLogIn","userLogOut","userAutoLogIn","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","isLoggedIn","setIsLoggedIn","accessToken","setAccessToken","login","email","password","res","autoLogin","token","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["X:/Other/Coding/React/database-app/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import { createContext, ReactNode, useContext, useState } from \"react\";\r\n\r\nimport userLogIn from \"../functions/userLogIn\";\r\nimport userLogOut from \"../functions/userLogOut\";\r\nimport userAutoLogIn from \"../functions/userAutoLogIn\";\r\n\r\ninterface AuthContextType {\r\n    isLoggedIn: boolean;\r\n    login: (email: string, password: string) => Promise<any>;\r\n    logout: (email: string) => Promise<any>;\r\n    autoLogin: (token: string) => Promise<any>;\r\n    accessToken: string;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport default function AuthProvider({ children }: { children: ReactNode }) {\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    const [accessToken, setAccessToken] = useState<string>(\"\");\r\n\r\n    const login = async (email: string, password: string) => {\r\n        const res = await userLogIn(email, password);\r\n        if (res) {\r\n            setIsLoggedIn(true);\r\n            setAccessToken(res.accessToken);\r\n            return res;\r\n        } else {\r\n            setIsLoggedIn(false);\r\n        }\r\n    }\r\n\r\n    const autoLogin = async (token: string) => {\r\n        const res = await userAutoLogIn(token);\r\n        if (res) {\r\n            setIsLoggedIn(true);\r\n            setAccessToken(res.accessToken)\r\n            return res;\r\n        }\r\n    }\r\n\r\n    const logout = async (email: string) => {\r\n        const res = await userLogOut(email);\r\n        if (res) {\r\n            setIsLoggedIn(false);\r\n            setAccessToken(\"\");\r\n            return res;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ isLoggedIn, login, logout, autoLogin, accessToken }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) throw new Error(\"useAuth must be used within an AuthProvider\");\r\n    return context;\r\n}"],"mappings":";;;AAAA,SAASA,aAAa,EAAaC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAEtE,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,aAAa,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAUvD,MAAMC,WAAW,gBAAGR,aAAa,CAA8BS,SAAS,CAAC;AAEzE,eAAe,SAASC,YAAYA,CAAC;EAAEC;AAAkC,CAAC,EAAE;EAAAC,EAAA;EACxE,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAS,EAAE,CAAC;EAE1D,MAAMe,KAAK,GAAG,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,KAAK;IACrD,MAAMC,GAAG,GAAG,MAAMjB,SAAS,CAACe,KAAK,EAAEC,QAAQ,CAAC;IAC5C,IAAIC,GAAG,EAAE;MACLN,aAAa,CAAC,IAAI,CAAC;MACnBE,cAAc,CAACI,GAAG,CAACL,WAAW,CAAC;MAC/B,OAAOK,GAAG;IACd,CAAC,MAAM;MACHN,aAAa,CAAC,KAAK,CAAC;IACxB;EACJ,CAAC;EAED,MAAMO,SAAS,GAAG,MAAOC,KAAa,IAAK;IACvC,MAAMF,GAAG,GAAG,MAAMf,aAAa,CAACiB,KAAK,CAAC;IACtC,IAAIF,GAAG,EAAE;MACLN,aAAa,CAAC,IAAI,CAAC;MACnBE,cAAc,CAACI,GAAG,CAACL,WAAW,CAAC;MAC/B,OAAOK,GAAG;IACd;EACJ,CAAC;EAED,MAAMG,MAAM,GAAG,MAAOL,KAAa,IAAK;IACpC,MAAME,GAAG,GAAG,MAAMhB,UAAU,CAACc,KAAK,CAAC;IACnC,IAAIE,GAAG,EAAE;MACLN,aAAa,CAAC,KAAK,CAAC;MACpBE,cAAc,CAAC,EAAE,CAAC;MAClB,OAAOI,GAAG;IACd;EACJ,CAAC;EAED,oBACIb,OAAA,CAACC,WAAW,CAACgB,QAAQ;IAACC,KAAK,EAAE;MAAEZ,UAAU;MAAEI,KAAK;MAAEM,MAAM;MAAEF,SAAS;MAAEN;IAAY,CAAE;IAAAJ,QAAA,EAC9EA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B;AAACjB,EAAA,CAtCuBF,YAAY;AAAAoB,EAAA,GAAZpB,YAAY;AAwCpC,OAAO,MAAMqB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACzB,MAAMC,OAAO,GAAGhC,UAAU,CAACO,WAAW,CAAC;EACvC,IAAI,CAACyB,OAAO,EAAE,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAC5E,OAAOD,OAAO;AAClB,CAAC;AAAAD,GAAA,CAJYD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}